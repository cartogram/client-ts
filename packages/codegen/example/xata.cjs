"use strict";
var __extends =
  (this && this.__extends) ||
  (function () {
    var extendStatics = function (d, b) {
      extendStatics =
        Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array &&
          function (d, b) {
            d.__proto__ = b;
          }) ||
        function (d, b) {
          for (var p in b)
            if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
      return extendStatics(d, b);
    };
    return function (d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError(
          "Class extends value " + String(b) + " is not a constructor or null"
        );
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype =
        b === null
          ? Object.create(b)
          : ((__.prototype = b.prototype), new __());
    };
  })();
var __assign =
  (this && this.__assign) ||
  function () {
    __assign =
      Object.assign ||
      function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign.apply(this, arguments);
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.getXataClient = exports.XataClient = void 0;
// Generated by Xata Codegen 0.18.0. Please do not edit.
var client_1 = require("../../client/src");
/** @typedef { import('./types').SchemaTables } SchemaTables */
/** @type { SchemaTables } */
var tables = [
  {
    name: "teams",
    columns: [
      { name: "name", type: "string" },
      { name: "description", type: "text" },
      { name: "labels", type: "multiple" },
      { name: "index", type: "int" },
      { name: "rating", type: "float" },
      { name: "founded_date", type: "datetime" },
      { name: "email", type: "email" },
      {
        name: "settings",
        type: "object",
        columns: [
          { name: "plan", type: "string" },
          { name: "dark", type: "bool" },
          { name: "labels", type: "multiple" },
        ],
      },
      { name: "owner", type: "link", link: { table: "users" } },
    ],
  },
  {
    name: "users",
    columns: [
      { name: "email", type: "email", unique: true },
      { name: "name", type: "string" },
      {
        name: "settings",
        type: "object",
        columns: [
          { name: "plan", type: "string" },
          { name: "dark", type: "bool" },
          { name: "labels", type: "multiple" },
        ],
      },
      {
        name: "full_name",
        type: "string",
        notNull: true,
        defaultValue: "John Doe",
      },
      { name: "index", type: "int" },
      { name: "rating", type: "float" },
      { name: "birthDate", type: "datetime" },
      {
        name: "address",
        type: "object",
        columns: [
          { name: "street", type: "string" },
          { name: "zipcode", type: "int" },
        ],
      },
      { name: "team", type: "link", link: { table: "teams" } },
      { name: "pet", type: "link", link: { table: "pets" } },
      { name: "account_value", type: "int" },
    ],
  },
  {
    name: "pets",
    columns: [
      { name: "name", type: "string" },
      { name: "type", type: "string" },
      { name: "num_legs", type: "int" },
    ],
  },
];
/** @type { import('../../client/src').ClientConstructor<{}> } */
var DatabaseClient = (0, client_1.buildClient)();
var defaultOptions = { databaseURL: "https://test-r5vcv5.xata.sh/db/test" };
/** @typedef { import('./types').DatabaseSchema } DatabaseSchema */
/** @extends DatabaseClient<DatabaseSchema> */
var XataClient = /** @class */ (function (_super) {
  __extends(XataClient, _super);
  function XataClient(options) {
    return (
      _super.call(
        this,
        __assign(__assign({}, defaultOptions), options),
        tables
      ) || this
    );
  }
  return XataClient;
})(DatabaseClient);
exports.XataClient = XataClient;
var instance = undefined;
/** @type { () => XataClient } */
var getXataClient = function () {
  if (instance) return instance;
  instance = new XataClient();
  return instance;
};
exports.getXataClient = getXataClient;
