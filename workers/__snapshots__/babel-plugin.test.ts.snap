// Vitest Snapshot v1

exports[`babel plugin > a simple xata worker 1`] = `
[
  "/output/index.js",
  "


import { XataClient } from '/client/xata.ts'

const corsHeaders = {
'Access-Control-Allow-Origin': '*',
'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',
'Access-Control-Max-Age': '86400',
};

const workers = {
'helloWorld': async function helloWorld() {
  return 'Hello world';
}
}

export default {
async fetch(request) {
  if (request.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders,
    })
  } else {
    const url = new URL(request.url)
    const worker = url.searchParams.get('worker')
    const args = JSON.parse(url.searchParams.get('args'))
    const result = await workers[worker].apply({
      xata: new XataClient({apiKey: XATA_API_KEY }),
    }, args)
    return new Response(JSON.stringify(result), {
      headers: corsHeaders
    });
  }
},
};

",
]
`;

exports[`babel plugin > a xata worker with a local dependency 1`] = `
[
  "/output/index.js",
  "
import $dep_ec16d01 from '/Users/gimenete/projects/github.com/xataio/client-ts/dep.js'

import { XataClient } from '/client/xata.ts'

const corsHeaders = {
'Access-Control-Allow-Origin': '*',
'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',
'Access-Control-Max-Age': '86400',
};

const workers = {
'localDependency': async function localDependency() {
  return $dep_ec16d01.doSomething();
}
}

export default {
async fetch(request) {
  if (request.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders,
    })
  } else {
    const url = new URL(request.url)
    const worker = url.searchParams.get('worker')
    const args = JSON.parse(url.searchParams.get('args'))
    const result = await workers[worker].apply({
      xata: new XataClient({apiKey: XATA_API_KEY }),
    }, args)
    return new Response(JSON.stringify(result), {
      headers: corsHeaders
    });
  }
},
};

",
]
`;

exports[`babel plugin > a xata worker with an external module dependency 1`] = `
[
  "/output/index.js",
  "
import $camelCase_8cea4cd from '/client/node_modules/camelcase'

import { XataClient } from '/client/xata.ts'

const corsHeaders = {
'Access-Control-Allow-Origin': '*',
'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',
'Access-Control-Max-Age': '86400',
};

const workers = {
'camelCasedHelloWorld': async function camelCasedHelloWorld() {
  return $camelCase_8cea4cd('Hello world');
}
}

export default {
async fetch(request) {
  if (request.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders,
    })
  } else {
    const url = new URL(request.url)
    const worker = url.searchParams.get('worker')
    const args = JSON.parse(url.searchParams.get('args'))
    const result = await workers[worker].apply({
      xata: new XataClient({apiKey: XATA_API_KEY }),
    }, args)
    return new Response(JSON.stringify(result), {
      headers: corsHeaders
    });
  }
},
};

",
]
`;

exports[`babel plugin > a xata worker with arguments 1`] = `
[
  "/output/index.js",
  "


import { XataClient } from '/client/xata.ts'

const corsHeaders = {
'Access-Control-Allow-Origin': '*',
'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',
'Access-Control-Max-Age': '86400',
};

const workers = {
'paginatedResult': async function paginatedResult(page) {
  return page;
}
}

export default {
async fetch(request) {
  if (request.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders,
    })
  } else {
    const url = new URL(request.url)
    const worker = url.searchParams.get('worker')
    const args = JSON.parse(url.searchParams.get('args'))
    const result = await workers[worker].apply({
      xata: new XataClient({apiKey: XATA_API_KEY }),
    }, args)
    return new Response(JSON.stringify(result), {
      headers: corsHeaders
    });
  }
},
};

",
]
`;

exports[`babel plugin > no xata workers 1`] = `
[
  "/output/index.js",
  "


import { XataClient } from '/client/xata.ts'

const corsHeaders = {
'Access-Control-Allow-Origin': '*',
'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',
'Access-Control-Max-Age': '86400',
};

const workers = {

}

export default {
async fetch(request) {
  if (request.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders,
    })
  } else {
    const url = new URL(request.url)
    const worker = url.searchParams.get('worker')
    const args = JSON.parse(url.searchParams.get('args'))
    const result = await workers[worker].apply({
      xata: new XataClient({apiKey: XATA_API_KEY }),
    }, args)
    return new Response(JSON.stringify(result), {
      headers: corsHeaders
    });
  }
},
};

",
]
`;

exports[`babel plugin > supports TypeScrript 1`] = `
[
  "/output/index.js",
  "


import { XataClient } from '/client/xata.ts'

const corsHeaders = {
'Access-Control-Allow-Origin': '*',
'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',
'Access-Control-Max-Age': '86400',
};

const workers = {

}

export default {
async fetch(request) {
  if (request.method === 'OPTIONS') {
    return new Response(null, {
      headers: corsHeaders,
    })
  } else {
    const url = new URL(request.url)
    const worker = url.searchParams.get('worker')
    const args = JSON.parse(url.searchParams.get('args'))
    const result = await workers[worker].apply({
      xata: new XataClient({apiKey: XATA_API_KEY }),
    }, args)
    return new Response(JSON.stringify(result), {
      headers: corsHeaders
    });
  }
},
};

",
]
`;
