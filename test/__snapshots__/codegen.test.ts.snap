// Vitest Snapshot v1

exports[`generate > should respect case naming 1`] = `
"import {
  BaseClientOptions,
  buildClient,
  SchemaInference,
} from \\"@xata.io/client\\";

const tables = [
  {
    name: \\"teams_Like\\",
    columns: [
      { name: \\"name-test\\", type: \\"string\\" },
      { name: \\"labels_Test\\", type: \\"multiple\\" },
      { name: \\"ownerFoo\\", type: \\"link\\", link: { table: \\"users-foo\\" } },
    ],
  },
  {
    name: \\"users-foo\\",
    columns: [
      { name: \\"email-random\\", type: \\"email\\" },
      { name: \\"full_name\\", type: \\"string\\" },
      { name: \\"teamLike\\", type: \\"link\\", link: { table: \\"teams_Like\\" } },
    ],
  },
] as const;

export type DatabaseSchema = SchemaInference<typeof tables>;

export type TeamRecord = DatabaseSchema[\\"teams\\"];
export type UserRecord = DatabaseSchema[\\"users\\"];

const DatabaseClient = buildClient();

export class XataClient extends DatabaseClient<typeof tables> {
  constructor(options?: BaseClientOptions) {
    super({ databaseURL: \\"\\", ...options }, tables);
  }
}
"
`;

exports[`generate > should respect numbers in names 1`] = `
"import {
  BaseClientOptions,
  buildClient,
  SchemaInference,
} from \\"@xata.io/client\\";

const tables = [
  {
    name: \\"1teams-case\\",
    columns: [
      { name: \\"2nameCase\\", type: \\"string\\" },
      { name: \\"3Labels\\", type: \\"multiple\\" },
    ],
  },
] as const;

export type DatabaseSchema = SchemaInference<typeof tables>;

export type TeamRecord = DatabaseSchema[\\"teams\\"];
export type UserRecord = DatabaseSchema[\\"users\\"];

const DatabaseClient = buildClient();

export class XataClient extends DatabaseClient<typeof tables> {
  constructor(options?: BaseClientOptions) {
    super({ databaseURL: \\"\\", ...options }, tables);
  }
}
"
`;
