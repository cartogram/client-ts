// Vitest Snapshot v1

exports[`generateFromLocalFiles > should generate correct JavaScript 1`] = `
[
  "import { buildClient } from \\"@xata.io/client\\";
/** @typedef { import('./types').Author } Author */
/** @typedef { import('./types').AuthorRecord } AuthorRecord */
/** @typedef { import('@xata.io/client').Repository<Author, AuthorRecord> } AuthorRepository */
/** @typedef { import('./types').Post } Post */
/** @typedef { import('./types').PostRecord } PostRecord */
/** @typedef { import('@xata.io/client').Repository<Post, PostRecord> } PostRepository */
/** @typedef { import('./types').Person } Person */
/** @typedef { import('./types').PersonRecord } PersonRecord */
/** @typedef { import('@xata.io/client').Repository<Person, PersonRecord> } PersonRepository */
const links = { authors: [], posts: [[\\"author\\", \\"authors\\"]], people: [] };
export class XataClient extends buildClient() {
  constructor(options) {
    super(
      {
        databaseURL: \\"https://my-workspace-gfdd12.xata.sh/db/hello-xata\\",
        ...options,
      },
      links
    );
  }
}
",
  "import { BaseClientOptions, XataRecord } from '@xata.io/client';
export interface Author {
    name?: string | null;
    email?: string | null;
    photoUrl?: string | null;
    bio?: string | null;
    title?: string | null;
}
export declare type AuthorRecord = Author & XataRecord;
export interface Post {
    title?: string | null;
    summary?: string | null;
    content?: string | null;
    tags?: string[] | null;
    likes?: number | null;
    author?: AuthorRecord | null;
    date?: string | null;
    slug?: string | null;
    published?: boolean | null;
}
export declare type PostRecord = Post & XataRecord;
export interface Person {
    slug?: string | null;
    name?: string | null;
    title?: string | null;
    photoUrl?: string | null;
}
export declare type PersonRecord = Person & XataRecord;
declare const XataClient_base: any;
export declare class XataClient extends XataClient_base {
    constructor(options?: BaseClientOptions);
}
export {};
",
]
`;

exports[`generateFromLocalFiles > should generate correct TypeScript 1`] = `
[
  "import { buildClient, BaseClientOptions, XataRecord } from \\"@xata.io/client\\";

export interface Author {
  name?: string | null;
  email?: string | null;
  photoUrl?: string | null;
  bio?: string | null;
  title?: string | null;
}

export type AuthorRecord = Author & XataRecord;

export interface Post {
  title?: string | null;
  summary?: string | null;
  content?: string | null;
  tags?: string[] | null;
  likes?: number | null;
  author?: AuthorRecord | null;
  date?: string | null;
  slug?: string | null;
  published?: boolean | null;
}

export type PostRecord = Post & XataRecord;

export interface Person {
  slug?: string | null;
  name?: string | null;
  title?: string | null;
  photoUrl?: string | null;
}

export type PersonRecord = Person & XataRecord;

const links = { authors: [], posts: [[\\"author\\", \\"authors\\"]], people: [] };

export class XataClient extends buildClient<{
  authors: Author;
  posts: Post;
  people: Person;
}>() {
  constructor(options?: BaseClientOptions) {
    super(
      {
        databaseURL: \\"https://my-workspace-gfdd12.xata.sh/db/hello-xata\\",
        ...options,
      },
      links
    );
  }
}
",
]
`;
