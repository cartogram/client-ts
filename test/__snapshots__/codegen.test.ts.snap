// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`codegen should generate correct JavaScript 1`] = `
"import { BaseClient, RestRespositoryFactory } from \\"@xata.io/client\\";
/** @typedef { import('./types').Author } Author */
/** @typedef { import('./types').AuthorRecord } AuthorRecord */
/** @typedef { import('@xata.io/client').Repository<Author, AuthorRecord> } AuthorRepository */
/** @typedef { import('./types').Post } Post */
/** @typedef { import('./types').PostRecord } PostRecord */
/** @typedef { import('@xata.io/client').Repository<Post, PostRecord> } PostRepository */
/** @typedef { import('./types').Person } Person */
/** @typedef { import('./types').PersonRecord } PersonRecord */
/** @typedef { import('@xata.io/client').Repository<Person, PersonRecord> } PersonRepository */
const links = { authors: [], posts: [[\\"author\\", \\"authors\\"]], people: [] };
export class XataClient extends BaseClient {
  constructor(options) {
    super(
      {
        databaseURL: \\"https://my-workspace-gfdd12.xata.sh/db/hello-xata\\",
        ...options,
      },
      links
    );
    const factory = options?.repositoryFactory || new RestRespositoryFactory();
    /** @type {{ \\"authors\\": AuthorRepository; \\"posts\\": PostRepository; \\"people\\": PersonRepository }} */
    this.db = {
      authors: factory.createRepository(this, \\"authors\\"),
      posts: factory.createRepository(this, \\"posts\\"),
      people: factory.createRepository(this, \\"people\\"),
    };
  }
}
"
`;

exports[`codegen should generate correct TypeScript 1`] = `
"import {
  BaseClient,
  Repository,
  RestRespositoryFactory,
  XataClientOptions,
  XataRecord,
} from \\"@xata.io/client\\";

export interface Author {
  name?: string | null;
  email?: string | null;
  photoUrl?: string | null;
  bio?: string | null;
  title?: string | null;
}

export type AuthorRecord = Author & XataRecord;

export interface Post {
  title?: string | null;
  summary?: string | null;
  content?: string | null;
  tags?: string[] | null;
  likes?: number | null;
  author?: AuthorRecord | null;
  date?: string | null;
  slug?: string | null;
  published?: boolean | null;
}

export type PostRecord = Post & XataRecord;

export interface Person {
  slug?: string | null;
  name?: string | null;
  title?: string | null;
  photoUrl?: string | null;
}

export type PersonRecord = Person & XataRecord;

const links = { authors: [], posts: [[\\"author\\", \\"authors\\"]], people: [] };

export class XataClient extends BaseClient<{
  authors: Repository<Author>;
  posts: Repository<Post>;
  people: Repository<Person>;
}> {
  constructor(options?: XataClientOptions) {
    super(
      {
        databaseURL: \\"https://my-workspace-gfdd12.xata.sh/db/hello-xata\\",
        ...options,
      },
      links
    );

    const factory = options?.repositoryFactory || new RestRespositoryFactory();

    this.db = {
      authors: factory.createRepository(this, \\"authors\\"),
      posts: factory.createRepository(this, \\"posts\\"),
      people: factory.createRepository(this, \\"people\\"),
    };
  }
}
"
`;
