// Vitest Snapshot v1

exports[`generate > should inject branch if passed 1`] = `
"// Generated by Xata Codegen 0.15.0. Please do not edit.
import {
  BaseClientOptions,
  buildClient,
  SchemaInference,
  XataRecord,
} from \\"@xata.io/client\\";

const tables = [
  { name: \\"users\\", columns: [{ name: \\"name\\", type: \\"string\\" }] },
] as const;

export type SchemaTables = typeof tables;
export type DatabaseSchema = SchemaInference<SchemaTables>;

export type Users = DatabaseSchema[\\"users\\"];
export type UsersRecord = Users & XataRecord;

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: \\"https://workspace-1234.xata.sh/db/dbname\\",
  branch: \\"feature-branch\\",
};

export class XataClient extends DatabaseClient<SchemaTables> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;
export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
"
`;

exports[`generate > should respect case naming 1`] = `
"// Generated by Xata Codegen 0.15.0. Please do not edit.
import {
  BaseClientOptions,
  buildClient,
  SchemaInference,
  XataRecord,
} from \\"@xata.io/client\\";

const tables = [
  {
    name: \\"teams_Like\\",
    columns: [
      { name: \\"name-test\\", type: \\"string\\" },
      { name: \\"labels_Test\\", type: \\"multiple\\" },
      { name: \\"ownerFoo\\", type: \\"link\\", link: { table: \\"users-foo\\" } },
    ],
  },
  {
    name: \\"users-foo\\",
    columns: [
      { name: \\"email-random\\", type: \\"email\\" },
      { name: \\"full_name\\", type: \\"string\\" },
      { name: \\"teamLike\\", type: \\"link\\", link: { table: \\"teams_Like\\" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type DatabaseSchema = SchemaInference<SchemaTables>;

export type TeamsLike = DatabaseSchema[\\"teams_Like\\"];
export type TeamsLikeRecord = TeamsLike & XataRecord;

export type UsersFoo = DatabaseSchema[\\"users-foo\\"];
export type UsersFooRecord = UsersFoo & XataRecord;

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: \\"https://workspace-1234.xata.sh/db/dbname\\",
};

export class XataClient extends DatabaseClient<SchemaTables> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;
export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
"
`;

exports[`generate > should respect numbers in names 1`] = `
"// Generated by Xata Codegen 0.15.0. Please do not edit.
import {
  BaseClientOptions,
  buildClient,
  SchemaInference,
  XataRecord,
} from \\"@xata.io/client\\";

const tables = [
  {
    name: \\"1teams-case\\",
    columns: [
      { name: \\"2nameCase\\", type: \\"string\\" },
      { name: \\"3Labels\\", type: \\"multiple\\" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type DatabaseSchema = SchemaInference<SchemaTables>;

export type $1teamsCase = DatabaseSchema[\\"1teams-case\\"];
export type $1teamsCaseRecord = $1teamsCase & XataRecord;

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: \\"https://workspace-1234.xata.sh/db/dbname\\",
};

export class XataClient extends DatabaseClient<SchemaTables> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;
export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
"
`;
